# -*- coding: utf-8 -*-
"""simple-linear-regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V1GMZx6Xs697zcDtEIO_VhVgFWk1covo
"""

# Jovian Commit Essentials
# Please retain and execute this cell without modifying the contents for `jovian.commit` to work
!pip install jovian --upgrade -q
import jovian
jovian.set_project('simple-linear-regression')
jovian.set_colab_id('1V1GMZx6Xs697zcDtEIO_VhVgFWk1covo')

"""# Simple Linear Regression

Use the "Run" button to execute the code.
"""

!pip install jovian --upgrade --quiet

import jovian

# Execute this to save new versions of the notebook
jovian.commit(project="simple-linear-regression")

"""# **Simple Linear Regression**

## y = b1 + b2*x 
- here b1 and b2 are coefficients.
- y is dependent variable
- x is independent variable

# Importing Libraries
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import jovian

"""Importing Dataset and creating a Pandas dataframe. """

dataset = pd.read_csv("/content/Datasets/Salary_Data.csv")

#Looking some randoms rows of dataset/
dataset.sample(10)

"""Making Varibles for dependant and independant variable."""

x = dataset.iloc[: , :-1].values           # :-1 indexing select all columns except last column
y = dataset.iloc[: , -1].values

# print(x)
# print(y)

"""Splitting the dataset into the Training and test set."""

from sklearn.model_selection import train_test_split
x_train , x_test , y_train , y_test = train_test_split( x , y , test_size = 0.2 , random_state = 1)

"""### Syntax of train_test_split
sklearn.model_selection.train_test_split(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)
"""

# print(x_train)
# print(x_test)   
# print(y_train)
# print(y_test)

"""# Creating a Machine Learning Model using linear_model module class LinearRegression. """

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit( x_train , y_train )

"""We can get prediction from our Model using .predict method of model."""

y_test_pred = regressor.predict( x_test )
y_train_pred = regressor.predict( x_train )

"""Plotting Training data prediction using matplotlib.pyplot


"""

plt.scatter(x_train , y_train , color = "red")
plt.plot(x_train , y_train_pred , color = "blue")
plt.title("Salary vs Experience (Training set)")
plt.xlabel("Years of Experience")
plt.ylabel("Salary")
plt.show()

"""Plotting Testing data prediction using matplotlib.pyplot"""

plt.scatter(x_test , y_test , color = "red")
plt.plot(x_train , y_train_pred , color = "blue")
plt.title("Salary vs Experience (Test set)")
plt.xlabel("Years of Experience")
plt.ylabel("Salary")
plt.show()

print(regressor.predict([[12]]))

print(regressor.coef_[0])
print(regressor.intercept_)

# Execute this to save new versions of the notebook
jovian.commit(project="simple-linear-regression")